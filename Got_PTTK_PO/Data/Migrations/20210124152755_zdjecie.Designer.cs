// <auto-generated />
using System;
using Got_PTTK_PO.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Got_PTTK_PO.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210124152755_zdjecie")]
    partial class zdjecie
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Got_PTTK_PO.Models.Adres", b =>
                {
                    b.Property<int>("IdA")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KodPocztowy")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Kraj")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Miasto")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("NrDomu")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("NrMieszkania")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Ulica")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("IdA");

                    b.ToTable("Adres");

                    b.HasData(
                        new
                        {
                            IdA = 1,
                            KodPocztowy = "52-215",
                            Kraj = "Polska",
                            Miasto = "Wroclaw",
                            NrDomu = "1",
                            NrMieszkania = "2",
                            Ulica = "Ametystowa"
                        },
                        new
                        {
                            IdA = 2,
                            KodPocztowy = "57-215",
                            Kraj = "Polska",
                            Miasto = "Wałbrzych",
                            NrDomu = "3c",
                            NrMieszkania = "2a",
                            Ulica = "Brzegowa"
                        },
                        new
                        {
                            IdA = 3,
                            KodPocztowy = "58-298",
                            Kraj = "Polska",
                            Miasto = "Wałbrzych",
                            NrDomu = "12",
                            NrMieszkania = "4",
                            Ulica = "Brzegowa"
                        });
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.EkspertGorski", b =>
                {
                    b.Property<string>("IdUz")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DataUrodzenia")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdA")
                        .HasColumnType("int");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("NrTel")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("NumerL")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdUz");

                    b.HasIndex("IdA");

                    b.HasIndex("NumerL");

                    b.ToTable("EksperciGorski");

                    b.HasData(
                        new
                        {
                            IdUz = "f97cf24a-826f-4bb7-86dc-fb3dd75db49e",
                            DataUrodzenia = new DateTime(1962, 1, 8, 9, 27, 0, 0, DateTimeKind.Unspecified),
                            IdA = 2,
                            Imie = "Przodownik1",
                            Nazwisko = "Kowalski",
                            NrTel = "696380122",
                            NumerL = "1111"
                        },
                        new
                        {
                            IdUz = "672e4d89-8a65-4171-a757-60a0271a2148",
                            DataUrodzenia = new DateTime(1962, 1, 8, 9, 27, 0, 0, DateTimeKind.Unspecified),
                            IdA = 3,
                            Imie = "Przodownik2",
                            Nazwisko = "Kowalski",
                            NrTel = "111234432",
                            NumerL = "2222"
                        },
                        new
                        {
                            IdUz = "c5186eea-0e69-4523-96e3-e69841245e5a",
                            DataUrodzenia = new DateTime(1962, 1, 8, 9, 27, 0, 0, DateTimeKind.Unspecified),
                            IdA = 2,
                            Imie = "Przewodnik1",
                            Nazwisko = "Nowak1",
                            NrTel = "501380756",
                            NumerL = "1111p"
                        },
                        new
                        {
                            IdUz = "22923dfe-c5a2-4f8c-8d5c-dbc8de208b38",
                            DataUrodzenia = new DateTime(1962, 1, 8, 9, 27, 0, 0, DateTimeKind.Unspecified),
                            IdA = 1,
                            Imie = "Przewodnik2",
                            Nazwisko = "Kowalski2",
                            NrTel = "123423123",
                            NumerL = "2222p"
                        });
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.FragmentWycieczki", b =>
                {
                    b.Property<int>("IdW")
                        .HasColumnType("int");

                    b.Property<int>("NumerFW")
                        .HasColumnType("int");

                    b.Property<bool>("CzyZaliczony")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DoZaliczenia")
                        .HasColumnType("bit");

                    b.Property<string>("IdUz")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NazwaPK")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("NazwaPP")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("NazwaT")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("PowodOdrzucenia")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("ZdjecieDowod")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("IdW", "NumerFW");

                    b.HasIndex("IdUz");

                    b.HasIndex("NazwaT", "NazwaPP", "NazwaPK");

                    b.ToTable("FragmentWycieczki");
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.KsiazeczkaGOTPTTK", b =>
                {
                    b.Property<int>("NumerK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataUtworzenia")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUz")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NumerK");

                    b.ToTable("KsiazeczkaGOTPTTKs");

                    b.HasData(
                        new
                        {
                            NumerK = 1,
                            DataUtworzenia = new DateTime(2020, 6, 1, 7, 47, 0, 0, DateTimeKind.Unspecified),
                            IdUz = "832b741c-eed5-4a47-989d-cd5957355cef"
                        },
                        new
                        {
                            NumerK = 2,
                            DataUtworzenia = new DateTime(2020, 6, 1, 7, 47, 0, 0, DateTimeKind.Unspecified),
                            IdUz = "24412758-bf78-4b21-a421-cf1b349683f1"
                        },
                        new
                        {
                            NumerK = 3,
                            DataUtworzenia = new DateTime(2020, 10, 1, 17, 7, 3, 0, DateTimeKind.Unspecified),
                            IdUz = "c3fe7b5e-7dc5-46da-9437-3ecf54f6dc6d"
                        },
                        new
                        {
                            NumerK = 4,
                            DataUtworzenia = new DateTime(2020, 12, 8, 9, 27, 0, 0, DateTimeKind.Unspecified),
                            IdUz = "c9f02a8f-e780-4f08-b99d-41996e763671"
                        });
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Legitymacja", b =>
                {
                    b.Property<string>("NumerL")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CzyWazna")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataWaznosci")
                        .HasColumnType("datetime2");

                    b.HasKey("NumerL");

                    b.ToTable("Legitymacje");

                    b.HasData(
                        new
                        {
                            NumerL = "1111",
                            CzyWazna = true,
                            DataWaznosci = new DateTime(2022, 12, 8, 9, 27, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            NumerL = "2222",
                            CzyWazna = false,
                            DataWaznosci = new DateTime(2019, 12, 8, 9, 27, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            NumerL = "1111p",
                            CzyWazna = true,
                            DataWaznosci = new DateTime(2022, 9, 2, 9, 27, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            NumerL = "2222p",
                            CzyWazna = false,
                            DataWaznosci = new DateTime(2021, 1, 8, 9, 27, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Legitymacja_ObszarGorski", b =>
                {
                    b.Property<string>("NumerL")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NazwaOG")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("NumerL", "NazwaOG");

                    b.HasIndex("NazwaOG");

                    b.ToTable("Legitymacja_ObszarGorski");

                    b.HasData(
                        new
                        {
                            NumerL = "1111",
                            NazwaOG = "A1"
                        },
                        new
                        {
                            NumerL = "1111",
                            NazwaOG = "C3"
                        },
                        new
                        {
                            NumerL = "2222",
                            NazwaOG = "C3"
                        },
                        new
                        {
                            NumerL = "1111p",
                            NazwaOG = "C3"
                        },
                        new
                        {
                            NumerL = "2222",
                            NazwaOG = "A2"
                        });
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Norma", b =>
                {
                    b.Property<int>("IdO")
                        .HasColumnType("int");

                    b.Property<int>("NumerN")
                        .HasColumnType("int");

                    b.Property<int>("WymagPkt")
                        .HasColumnType("int");

                    b.HasKey("IdO", "NumerN");

                    b.ToTable("Norma");
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Norma_Sezon", b =>
                {
                    b.Property<int>("IdS")
                        .HasColumnType("int");

                    b.Property<int>("IdO")
                        .HasColumnType("int");

                    b.Property<int>("NumerN")
                        .HasColumnType("int");

                    b.Property<bool>("Aktualna")
                        .HasColumnType("bit");

                    b.Property<int>("Punkty")
                        .HasColumnType("int");

                    b.HasKey("IdS", "IdO", "NumerN");

                    b.HasIndex("IdO", "NumerN");

                    b.ToTable("Norma_Sezon");
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.ObszarGorski", b =>
                {
                    b.Property<string>("NazwaOG")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("NazwaOG");

                    b.ToTable("ObszarGorski");
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Odznaka", b =>
                {
                    b.Property<int>("IdO")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Rodzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Stopien")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("IdO");

                    b.ToTable("Odznaka");
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Punkt", b =>
                {
                    b.Property<string>("NazwaP")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<float>("DlGeo")
                        .HasColumnType("real");

                    b.Property<string>("Rodzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("SzerGeo")
                        .HasColumnType("real");

                    b.Property<float>("WysNpm")
                        .HasColumnType("real");

                    b.HasKey("NazwaP");

                    b.ToTable("Punkt");

                    b.HasData(
                        new
                        {
                            NazwaP = "Pierwszy",
                            DlGeo = 1f,
                            Rodzaj = "Początkowy",
                            SzerGeo = 12f,
                            WysNpm = 1231f
                        },
                        new
                        {
                            NazwaP = "Drugi",
                            DlGeo = 2f,
                            Rodzaj = "Pośredni",
                            SzerGeo = 122f,
                            WysNpm = 1232f
                        },
                        new
                        {
                            NazwaP = "Trzeci",
                            DlGeo = 3f,
                            Rodzaj = "Początkowy",
                            SzerGeo = 124f,
                            WysNpm = 1233f
                        });
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Punkt_RegionGorski", b =>
                {
                    b.Property<string>("NazwaP")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("IdRG")
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("NazwaP", "IdRG");

                    b.HasIndex("IdRG");

                    b.ToTable("Punkt_RegionGorski");
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Punkt_TerenGorski", b =>
                {
                    b.Property<string>("NazwaP")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NazwaTG")
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("NazwaP", "NazwaTG");

                    b.HasIndex("NazwaTG");

                    b.ToTable("Punkt_TerenGorski");
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.RegionGorski", b =>
                {
                    b.Property<string>("IdRG")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("NazwaOG")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdRG");

                    b.HasIndex("NazwaOG");

                    b.ToTable("RegionGorski");

                    b.HasData(
                        new
                        {
                            IdRG = "TEST",
                            NazwaOG = "A1"
                        });
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Sezon", b =>
                {
                    b.Property<int>("IdS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Nadwyzka")
                        .HasColumnType("int");

                    b.Property<int>("NumerK")
                        .HasColumnType("int");

                    b.Property<int>("Punkty")
                        .HasColumnType("int");

                    b.Property<int>("Rok")
                        .HasColumnType("int");

                    b.HasKey("IdS");

                    b.HasIndex("NumerK");

                    b.ToTable("Sezon");
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.TerenGorski", b =>
                {
                    b.Property<string>("NazwaTG")
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.HasKey("NazwaTG");

                    b.ToTable("TerenGorski");
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Trasa", b =>
                {
                    b.Property<string>("NazwaT")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("NazwaPP")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("NazwaPK")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("CzyAktywna")
                        .HasColumnType("bit");

                    b.Property<int>("LiczbaPkt")
                        .HasColumnType("int");

                    b.HasKey("NazwaT", "NazwaPP", "NazwaPK");

                    b.HasIndex("NazwaPK");

                    b.HasIndex("NazwaPP");

                    b.ToTable("Trasa");

                    b.HasData(
                        new
                        {
                            NazwaT = "Pierwsza",
                            NazwaPP = "Pierwszy",
                            NazwaPK = "Trzeci",
                            CzyAktywna = true,
                            LiczbaPkt = 7
                        });
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Turysta", b =>
                {
                    b.Property<string>("IdUz")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CzyDziecko")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataUrodzenia")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdA")
                        .HasColumnType("int");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("NrTel")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int?>("NumerK")
                        .HasColumnType("int");

                    b.HasKey("IdUz");

                    b.HasIndex("IdA");

                    b.HasIndex("NumerK")
                        .IsUnique()
                        .HasFilter("[NumerK] IS NOT NULL");

                    b.ToTable("Turysta");

                    b.HasData(
                        new
                        {
                            IdUz = "832b741c-eed5-4a47-989d-cd5957355cef",
                            CzyDziecko = false,
                            DataUrodzenia = new DateTime(2008, 6, 1, 7, 47, 0, 0, DateTimeKind.Unspecified),
                            IdA = 1,
                            Imie = "Konrad",
                            Nazwisko = "Liuras"
                        },
                        new
                        {
                            IdUz = "24412758-bf78-4b21-a421-cf1b349683f1",
                            CzyDziecko = false,
                            DataUrodzenia = new DateTime(1986, 3, 3, 7, 47, 0, 0, DateTimeKind.Unspecified),
                            IdA = 3,
                            Imie = "Turysta1",
                            Nazwisko = "NazwiskoTurysty1"
                        },
                        new
                        {
                            IdUz = "c3fe7b5e-7dc5-46da-9437-3ecf54f6dc6d",
                            CzyDziecko = false,
                            DataUrodzenia = new DateTime(1995, 4, 1, 7, 47, 0, 0, DateTimeKind.Unspecified),
                            IdA = 2,
                            Imie = "Turysta2",
                            Nazwisko = "NazwiskoTurysty2"
                        });
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Wycieczka", b =>
                {
                    b.Property<int>("IdW")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CzyZaliczona")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataRozp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataZak")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumerK")
                        .HasColumnType("int");

                    b.HasKey("IdW");

                    b.HasIndex("NumerK");

                    b.ToTable("Wycieczka");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.EkspertGorski", b =>
                {
                    b.HasOne("Got_PTTK_PO.Models.Adres", "AdresZamieszkania")
                        .WithMany("Eksperci")
                        .HasForeignKey("IdA")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("IdUz")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Got_PTTK_PO.Models.Legitymacja", "Legitymacja")
                        .WithMany()
                        .HasForeignKey("NumerL");
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.FragmentWycieczki", b =>
                {
                    b.HasOne("Got_PTTK_PO.Models.EkspertGorski", "Potwierdzajacy")
                        .WithMany("PotwierdzoneFragmenty")
                        .HasForeignKey("IdUz");

                    b.HasOne("Got_PTTK_PO.Models.Wycieczka", "Wycieczka")
                        .WithMany("TrasyWycieczki")
                        .HasForeignKey("IdW")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Got_PTTK_PO.Models.Trasa", "Trasa")
                        .WithMany("WycieczkiZTrasa")
                        .HasForeignKey("NazwaT", "NazwaPP", "NazwaPK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Legitymacja_ObszarGorski", b =>
                {
                    b.HasOne("Got_PTTK_PO.Models.ObszarGorski", "ObszarGorski")
                        .WithMany("LegitymacjeNaObszar")
                        .HasForeignKey("NazwaOG")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Got_PTTK_PO.Models.Legitymacja", "Legitymacja")
                        .WithMany("UprawnieniaNaObszary")
                        .HasForeignKey("NumerL")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Norma", b =>
                {
                    b.HasOne("Got_PTTK_PO.Models.Odznaka", "Odznaka")
                        .WithMany("Normy")
                        .HasForeignKey("IdO")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Norma_Sezon", b =>
                {
                    b.HasOne("Got_PTTK_PO.Models.Sezon", "Sezon")
                        .WithMany("NormyWSezonie")
                        .HasForeignKey("IdS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Got_PTTK_PO.Models.Norma", "Norma")
                        .WithMany("SezonyZNorma")
                        .HasForeignKey("IdO", "NumerN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Punkt_RegionGorski", b =>
                {
                    b.HasOne("Got_PTTK_PO.Models.RegionGorski", "RegionGorski")
                        .WithMany("PunktyWRegionie")
                        .HasForeignKey("IdRG")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Got_PTTK_PO.Models.Punkt", "Punkt")
                        .WithMany("RegionyGorskie")
                        .HasForeignKey("NazwaP")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Punkt_TerenGorski", b =>
                {
                    b.HasOne("Got_PTTK_PO.Models.Punkt", "Punkt")
                        .WithMany("TerenyGorskie")
                        .HasForeignKey("NazwaP")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Got_PTTK_PO.Models.TerenGorski", "TerenGorski")
                        .WithMany("PunktyWTerenie")
                        .HasForeignKey("NazwaTG")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.RegionGorski", b =>
                {
                    b.HasOne("Got_PTTK_PO.Models.ObszarGorski", "ObszarGorski")
                        .WithMany("RegionyGorskie")
                        .HasForeignKey("NazwaOG");
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Sezon", b =>
                {
                    b.HasOne("Got_PTTK_PO.Models.KsiazeczkaGOTPTTK", "Ksiazeczka")
                        .WithMany()
                        .HasForeignKey("NumerK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Trasa", b =>
                {
                    b.HasOne("Got_PTTK_PO.Models.Punkt", "PunktKonc")
                        .WithMany("TrasyKonczone")
                        .HasForeignKey("NazwaPK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Got_PTTK_PO.Models.Punkt", "PunktPocz")
                        .WithMany("TrasyRozpoczynane")
                        .HasForeignKey("NazwaPP")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Turysta", b =>
                {
                    b.HasOne("Got_PTTK_PO.Models.Adres", "AdresZamieszkania")
                        .WithMany("Turysci")
                        .HasForeignKey("IdA")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("IdUz")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Got_PTTK_PO.Models.KsiazeczkaGOTPTTK", "Ksiazeczka")
                        .WithOne("Wlasciciel")
                        .HasForeignKey("Got_PTTK_PO.Models.Turysta", "NumerK");
                });

            modelBuilder.Entity("Got_PTTK_PO.Models.Wycieczka", b =>
                {
                    b.HasOne("Got_PTTK_PO.Models.KsiazeczkaGOTPTTK", "Ksiazeczka")
                        .WithMany("Wycieczki")
                        .HasForeignKey("NumerK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
